# Build stage
FROM node:lts-alpine as build-stage
WORKDIR /app
COPY 4skl/ ./
RUN npm install
RUN npm run build --base=/

# Production stage
FROM nginx:stable-alpine as production-stage
COPY --from=build-stage /app/dist /var/www/blog.4skl.com/dist

# Set up Nginx to serve the site and Certbot to renew the certificate
# Remove the default Nginx configuration file
RUN rm /etc/nginx/conf.d/default.conf

# Add our configuration file
COPY reverse-proxy-prod.conf /etc/nginx/conf.d/

# Expose ports
EXPOSE 80
EXPOSE 443

# Set up environment variables
ENV CERTBOT_EMAIL="medi.olivier@hotmail.fr"
ENV CERTBOT_DOMAIN="blog.4skl.com"

# Set up Supervisor to run multiple processes (Nginx and Certbot renew)
RUN apk add -U supervisor

COPY supervisord.conf /etc/supervisord.conf

# Install Certbot and Certbot-nginx
RUN apk add --no-cache certbot certbot-nginx

# Add a script that runs Certbot to create a certificate or renew it if it already exists and it's needed*
# * Certbot will only renew the certificate if it's less than 30 days from expiring
# * Certbot will only create a certificate if it doesn't exist
# * Certbot will only create a certificate if the domain name is valid and the DNS is pointing to the server
COPY certificate-setup.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/certificate-setup.sh

# Copy the startup script (certificate-setup.sh, then runs the Supervisor daemon to run Nginx and Certbot renew)
COPY startup-nginx.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/startup-nginx.sh

# Wait for the django backend to be ready
# Install netcat
RUN apk add --no-cache netcat-openbsd

# Add a script that waits for the Django service
COPY wait-for.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/wait-for.sh

# Wait for the Django service to be ready before starting Nginx and Certbot and run the Supervisor daemon
CMD ["sh", "/usr/local/bin/wait-for.sh", "django:8000", "--", "/usr/local/bin/startup-nginx.sh"]